# import pandas as pd
# import requests
# import time

# import logging
# logging.basicConfig(filename='/Users/holodkovaelizavetaigorevna/graduate_work/BioMol-Generator/model_prompting/api_models/api.log', level=logging.INFO)

# class LigandGenerator:
#     def __init__(self, api_key, model, system_file_path, preprompt_file_path, postprompt_file_path):
#         """
#         –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞.
#         :param api_key: –í–∞—à API-–∫–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ VseGPT.
#         :param model: ID –º–æ–¥–µ–ª–∏, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å.
#         :param system_file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É system.txt.
#         :param preprompt_file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É preprompt.txt.
#         :param postprompt_file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É document.txt.
#         """
#         self.api_key = api_key
#         self.model = model
#         self.system = self._read_file(system_file_path)
#         self.preprompt = self._read_file(preprompt_file_path)
#         self.postprompt = self._read_file(postprompt_file_path)
#         self.headers = {
#             "Authorization": f"Bearer {self.api_key}",
#             "Content-Type": "application/json"
#         }

#     def _read_file(self, file_path):
#         """–ß—Ç–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞."""
#         with open(file_path, 'r') as file:
#             return file.read()

#     def generate_prompt(self, protein_sequence):
#         """
#         –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ–º—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ API.
#         :param protein_sequence: –ë–µ–ª–∫–æ–≤–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å.
#         :return: –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞.
#         """
#         question = f"<question>\nProtein sequence: {protein_sequence}\n</question>"
#         return f"{self.system}\n{self.preprompt}\n{question}\n{self.postprompt}"

#     def send_request(self, prompt):
#         """
#         –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API.
#         :param prompt: –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ (–ø—Ä–æ–º—Ç).
#         :return: –û—Ç–≤–µ—Ç –æ—Ç API –≤ –≤–∏–¥–µ JSON.
#         """
#         url = "https://api.vsegpt.ru/v1/chat/completions"
#         payload = {
#             "model": self.model,
#             "messages": [{"role": "user", "content": prompt}],
#             "temperature": 0.7,
#             "max_tokens": 300
#         }
#         logging.info(f"payload: {payload}")

#         try:
#             response = requests.post(url, headers=self.headers, json=payload)
#             if response.status_code == 200:
#                 logging.info(f'response: {response.json()}')
#                 return response.json()
#             else:
#                 logging.info(f"Error: {response.status_code}, {response.text}")
#                 raise Exception(f"Error: {response.status_code}, {response.text}")
#         except Exception as e:
#             print(f"Request failed: {e}")
#             logging.info(f"Request failed: {e}")
#             return None

#     def process_dataframe(self, df, target_column="Target", output_column="Generated_SMILES"):
#         generated_smiles = []

#         for _, row in df.iterrows():
#             protein_sequence = row[target_column]
#             prompt = self.generate_prompt(protein_sequence)
#             try:
#                 response = self.send_request(prompt)
#                 if response is None:
#                     smiles = None
#                 else:
#                     result = response["choices"][0]["message"]["content"]
#                     print(f"API Response: {result}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
#                     logging.info(f"API Response: {result}")
#                     if "Correct molecular structure:" in result:
#                         smiles = result.split("Correct molecular structure: ")[-1].split("\n")[0].strip()
#                         logging.info(f'correct molecular structer: {smiles}')
#                     else:
#                         smiles = None
#                         logging.info(f'non correct molecular structer: {smiles}')
#             except Exception as e:
#                 smiles = f"Error: {str(e)}"
#                 logging.info(f"Error: {str(e)}")
#             generated_smiles.append(smiles)

#             # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π API
#             time.sleep(1)

#         df[output_column] = generated_smiles
#         return df
#     def save_results(self, df, output_file):
#         """
#         –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª.
#         :param df: DataFrame —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏.
#         :param output_file: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞.
#         """
#         df.to_csv(output_file, index=False)
#         print(f"Results saved to {output_file}")

import pandas as pd
import requests
import time
from rdkit import Chem
import logging
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename='ligand_generator.log',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - [%(lineno)d] %(message)s'
)

class LigandGenerator:
    def __init__(self, api_key, model, system_file_path, preprompt_file_path, postprompt_file_path):
        self.api_key = api_key
        self.model = model
        self.system = self._read_file(system_file_path)
        self.preprompt = self._read_file(preprompt_file_path)
        self.postprompt = self._read_file(postprompt_file_path)
        self.headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }

    def _read_file(self, file_path):
        with open(file_path, 'r') as file:
            return file.read().strip()

    def generate_prompt(self, protein_sequence):
        question = f"<question>\nProtein sequence: {protein_sequence}\n</question>"
        logging.info(f'protein_sequence: {protein_sequence}')
        return f"{self.system}\n{self.preprompt}\n{question}\n{self.postprompt}"

    def send_request(self, prompt, max_retries=3, delay=5):
        url = "https://api.vsegpt.ru/v1/chat/completions"

        payload = {
            "model": self.model,
            "messages": [{"role": "user", "content": prompt}],
            "temperature": 0.7,
            "max_tokens": 300
        }

        for attempt in range(max_retries):
            try:
                response = requests.post(url, headers=self.headers, json=payload, timeout=60)
                if response.status_code == 200:
                    logging.info("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API")
                    return response.json()
                else:
                    logging.warning(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code} ‚Äî {response.text}")
                    time.sleep(delay)
            except requests.exceptions.RequestException as e:
                logging.error(f"üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {e}")
                time.sleep(delay)

        logging.error("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫.")
        return None

    def is_valid_smiles(self, smiles):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤–∞–ª–∏–¥–Ω—ã–º SMILES."""
        if not isinstance(smiles, str) or len(smiles.strip()) == 0:
            return False
        try:
            mol = Chem.MolFromSmiles(smiles.strip())
            return mol is not None
        except:
            return False

    def extract_smiles(self, text):
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç SMILES –∏–∑ —Ç–µ–∫—Å—Ç–∞ –º–æ–¥–µ–ª–∏.
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã:
        - `O=C(Nc1ccc(cc1)C(=O)O)c2cccnc2`
        - ```smiles\n...\n```
        """
        if not isinstance(text, str):
            return None

        # –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è

        # –§–æ—Ä–º–∞—Ç: `...`
        backtick_match = re.search(r'`([^`\n]+)`', text)
        if backtick_match:
            candidate = backtick_match.group(1).strip()
            if self.is_valid_smiles(candidate):
                return candidate

        # –§–æ—Ä–º–∞—Ç: ```smiles ... ```
        code_block_match = re.search(r'```(?:smiles)?\s*([^\`]+)', text, re.DOTALL)
        if code_block_match:
            candidate = code_block_match.group(1).strip()
            if self.is_valid_smiles(candidate):
                return candidate

        # –§–æ—Ä–º–∞—Ç: SMILES: ...
        keywords = [
            "SMILES:", "smiles:", "Correct molecular structure:",
            "Molecular structure:", "Ligand SMILES:"
        ]
        for keyword in keywords:
            if keyword in text:
                content_after = text.split(keyword, 1)[-1].strip()
                candidate = content_after.split("\n", 1)[0].strip()
                candidate = candidate.split(".", 1)[0].strip()
                if self.is_valid_smiles(candidate):
                    return candidate

        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å
        logging.warning("‚ö†Ô∏è SMILES –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ.")
        return None

    def process_dataframe(self, df, target_column="Target", output_column="Generated_SMILES"):
        generated_smiles = []

        for idx, row in df.iterrows():
            protein_sequence = row[target_column]
            prompt = self.generate_prompt(protein_sequence)
            logging.info(f"[{idx}] Prompt: {prompt[:200]}...")

            try:
                response = self.send_request(prompt)
                if response is None:
                    logging.warning(f"[{idx}] –û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ –ø—É—Å—Ç–æ–π.")
                    generated_smiles.append(None)
                    continue

                content = response["choices"][0]["message"]["content"]
                logging.info(f"[{idx}] Raw Response: {content}")

                smiles = self.extract_smiles(content)
                if smiles and self.is_valid_smiles(smiles):
                    logging.info(f"[{idx}] ‚úÖ –í–∞–ª–∏–¥–Ω—ã–π SMILES: {smiles}")
                    generated_smiles.append(smiles)
                else:
                    logging.warning(f"[{idx}] ‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π SMILES.")
                    generated_smiles.append(None)

            except Exception as e:
                logging.error(f"[{idx}] üí• –û—à–∏–±–∫–∞: {str(e)}")
                generated_smiles.append(None)

            time.sleep(1)

        df[output_column] = generated_smiles
        return df

    def save_results(self, df, output_file):
        df.to_csv(output_file, index=False)
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_file}")
        logging.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_file}")